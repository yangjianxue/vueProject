vue实现原理：
	vue数据双向绑定原理：
		vue数据双向绑定是通过数据劫持(Object.defineProperty())结合发布者-订阅者模式的方式来实现的。

		ECMAScript中有两种属性：数据属性 ， 访问器属性

		数据属性：修改属性默认的特性
		语法：Object.defineProperty(属性所在的对象,属性的名字,描述符json对象)
		例如：
		Object.defineProperty(Person,"name",{
			configurable:true,   //能否通过delete删除属性，默认为true
			enumerable：true,    //能否通过for-in循环返回属性，默认为true
			writable:true,       //能否修改属性的值，默认为true
			value:'Jone'         //为该属性设置新值，默认为undefined
		})
		访问器属性：不包含数据值，而是一对 getter函数和setter函数（非必须），在读取属性时会调用getter函数，在设置属性值时会调用setter函数
		语法：Object.defineProperty(代理的对象,代理对象属性的名字,描述符json对象)
		例如：
		var Book = {
			_year:2004,
			edition:1
		}
		Object.deineProperty(Book,"year",{
			configurable:true,  //能否通过delete删除属性，默认为true
			enumerable：true,   //能否通过for-in循环返回属性，默认为true
			get:function(){ 
				return `您访问了year属性，属性值为${this._year}`
			},
			set:function(newVal){
				// newVal是设置的新的属性值
				if(newVal > 2004){
					this._year = newVal;
					this.edition += newVal - 2004
				}
			}
		})
	思路分析：
		实现MVVM主要包括两个方面，数据变化更新视图，视图变化更新数据
			视图变化更新数据 : 可以通过事件监听，比如input标签监听 'input' 事件
			数据改变更新视图 : 重点就是通过Object.defineProperty()对属性设置一个set函数，当数据改变时就会触发这个函数，将更新的方法放到这个函数中就可以实现data更新view了
	整体实现思路：
		要实现数据的双向绑定，首先要对数据进行劫持监听，所以需要一个监听器(Observer),用来监听所有属性。
		如果属性发生变化，就需要告诉订阅者(Watcher)看是否需要更新。
		因为订阅者有多个，所以需要一个消息订阅器(Dep)来专门收集这些订阅者，然后在监听器(Observer)和订阅者(Watcher)之间进行统一管理。
		然后需要一个指令解析器(Compile):对每个节点元素进行扫描和解析，将相关指令对应初始化成一个订阅者(Watcher)，并替换模板属性或者绑定相应的函数，
		此时当订阅者(Wacther)接收到相应属性的变化，就会执行对应的更新函数，从而更新视图。
		总结：
			实现数据绑定的3个步骤：
				1.实现一个监听器(Observer),用来劫持并监听所有属性，如果有变动的，就通知订阅者
				2.实现一个订阅者(Watcher),用来可以收到属性的变化通知并执行相应的函数，从而更新视图
				3.实现一个解析器(Compile),可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅器
	实现过程：
		1.实现一个监听器(Observer)
			1.1 核心方法就是通过递归方法遍历所有属性值

			function defineReactive(data,key,val){
				observe(val)  //递归遍历所有子属性
				Object.defineProperty(data,key,{
					enumerable:true,
					configurable:true,
					get:function(){
						return val
					},
					set:function(newVal){
						val = newVal;
						console.log(`$属性{key}已经监听到，新的属性值为${newVal.toSting()}`)
					}
				})
			}
			function observe(data){
				if(!data || typeof data !== 'object'){ return; }
				//Object.keys(对象名)   //返回的是当前对象的键名数组([键名1,键名2...])
				//Object.values(对象名) //返回的是当前对象的键值数组([键值1,键值2...])
				//Object.entries(对象名)//返回的是当前对象的键值对数组[ [键名1,键值1],[键名2,键值2]... ]
				Object.keys(data).forEach(function(key)){
					defineReactive(data,key,data[key])
					//data--是整个对象，key是键名，data[key]是当前循环项的键值
				}
			}
			1.2 此时，已经可以监听每个数据的变化了，然后需要通知订阅者，所以需要实现有一个消息订阅器，也就是维护一个数组，用啦收集订阅者，数据变动触发 notify ，然后在调用订阅者的 update 方法，
			此时完善后的代码，如下：

			function observe(data){
				if(!data || typeof data !== 'object'){return;}
				Object,keys(data).foEach(function(key)){
					defineReactive(data,key,data[key])
				}
			}
			function defineReactive(data,key,val){
				var dep = new Dep();//实例化一个消息订阅器
				observe(val)
				Objet,defineProperty(data,key,{
					enumerable:true,
					configurable:true,
					get:function(){
						return val
					},
					set:function(newVal){
						if(val === newVal) return;
						console.log(`数据发生变化了,${val}变成了${newVal}`)
						val = newVal;
						dep.notify();   //通知所有订阅者
					}
				})
			}
			//订阅器
			function Dep(){
				this.subs = []
			}
			Dep.prototype = {
				addSub:function(sub){
					this.subs.push(sub)
				},
				notify:function(){
					this.subs.forEach(function(sub){
						sub.update();
					})
				}
			}
			1.3 此时有了订阅器，那么订阅者又是谁，如何往订阅器里添加订阅者呢？
			经过上面的思路整理，我们已经明确订阅者应该是 Watcher， 而且 var dep = new Dep(); 实在 defineReactive 方法内部定义的，所以想通过 dep 添加订阅者，就必须要在闭包内操作，所以可以在 getter 中操作：
			此时，完善后的代码，如下：
			function observer(data){
				if(!data || typeof data !== 'object'){return;}
				Object.keys(data).forEach(function(key){
					defineReactive(data,key,data[key])
				})
			}
			function defineReactive(data,key,{
				enumerable:true,
				configurable:true,
				get:function(){
					//由于需要在闭包内添加 watcher, 所以通过 Dep 定义一个全局 target 属性，暂存 watcher ,添加完移除
					Dep.target && addDep(Dep.target);
					return val;
				},
				set:function(newVal){
					if(val == newVal) return;
					console.log(`数据发生变化了，${val} 变成了 ${newVal}`)
					val = newVal;
					dep.notify();
				}
			})
			function Dep(){
				this.subs = []
			}
			Dep.prototype = {
				addSub:function(){
					this.subs.push(sub)
				},
				notify:function(){
					this.subs.forEach(function(sub){
						sub.update()
					})
				}
			}
			Watcher.prototype = {
				get:function(key){
					Dep.target = this;
					//这里会触发属性的getter,从而添加订阅者
					this.value = data[key];
					Dep.target = null;
				}
			}
			注： 此时，已经实现了一个Observer,已经具备了监听数据和数据变化通知订阅者的功能
			1.4 完整代码，如下：
			function Observer(data){
				this.data = data;
				this.walk(data)
			}
			Observer.prototype = {
				walk:function(data){
					var me = this;
					Object.keys(data).forEach(function(key){
						me.convert(key,data[key])
					})
				},
				convert:function(key,val){
					this.defineReactive(this.data,key,val)
				},
				defineReactive:function(data,key,val){
					var dep = new Dep();
					var childObj = observer(val);
					Object,defineProperty(data,key,{
						enumerable:true,
						configurable:false,
						get:function(){
							if(Dep.target){
								dep.depend()
							}
							return val;
						},
						set:function(newVal){
							if(newVal == val){return;}
							val = newVal;
							//新的值是object的话，进行监听
							childObj = observer(newVal);
							//通知订阅者
							dep.notify();
						}
					})
				}
			};
			function observer(val,vm){
				if(!val || typeof val !== 'object'){return;}
				return new Observer(val)
			}
			var uid = 0;
			function Dep(){
				this.id = uid++;
				this.subs = [];
			}
			Dep.prototype = {
				addSub:function(sub){
					this.subs.push(sub);
				},
				depend:function(){
					Dep.target.addDep(this)
				},
				removeSub:function(sub){
					var i = this.subs.indexOf(sub);
					if(index != -1){
						this.subs.splice(i,1)
					}
				},
				notify:function(){
					this.subs.forEach(function(sub){
						sub.update()
					})
				}

			}
			Dep.target = null;

		2.实现Compile
			compile主要做的事情是解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图，如图所示：

																->初始化->渲染视图(Updater)
				new Compile()  ->(解析指令) ->模板指令替换成对应数据 ->
																->编译指令-> new Updater()监听数据，绑定更新函数

			因为遍历解析的过程有多次操作dom节点，为提高性能和效率，会先将跟节点el转换成文档碎片fragment进行解析编译操作，解析完成，再将fragment添加回原来的真实dom节点中：

			function Compile(el) {
			    this.$el = this.isElementNode(el) ? el : document.querySelector(el);
			    if (this.$el) {
			        this.$fragment = this.node2Fragment(this.$el);
			        this.init();
			        this.$el.appendChild(this.$fragment);
			    }
			}
			Compile.prototype = {
			    init: function() { this.compileElement(this.$fragment); },
			    node2Fragment: function(el) {
			        var fragment = document.createDocumentFragment(), child;
			        // 将原生节点拷贝到fragment
			        while (child = el.firstChild) {
			            fragment.appendChild(child);
			        }
			        return fragment;
			    }
			};
			2.1: compileElement方法将遍历所有节点及其子节点，进行扫描解析编译，调用对应的指令渲染函数进行数据渲染，并调用对应的指令更新函数进行绑定，详看代码及注释说明：
				Compile.prototype = {
				    // ... 省略
				    compileElement: function(el) {
				        var childNodes = el.childNodes, me = this;
				        [].slice.call(childNodes).forEach(function(node) {
				            var text = node.textContent;
				            var reg = /\{\{(.*)\}\}/;    // 表达式文本
				            // 按元素节点方式编译
				            if (me.isElementNode(node)) {
				                me.compile(node);
				            } else if (me.isTextNode(node) && reg.test(text)) {
				                me.compileText(node, RegExp.$1);
				            }
				            // 遍历编译子节点
				            if (node.childNodes && node.childNodes.length) {
				                me.compileElement(node);
				            }
				        });
				    },

				    compile: function(node) {
				        var nodeAttrs = node.attributes, me = this;
				        [].slice.call(nodeAttrs).forEach(function(attr) {
				            // 规定：指令以 v-xxx 命名
				            // 如 <span v-text="content"></span> 中指令为 v-text
				            var attrName = attr.name;    // v-text
				            if (me.isDirective(attrName)) {
				                var exp = attr.value; // content
				                var dir = attrName.substring(2);    // text
				                if (me.isEventDirective(dir)) {
				                    // 事件指令, 如 v-on:click
				                    compileUtil.eventHandler(node, me.$vm, exp, dir);
				                } else {
				                    // 普通指令
				                    compileUtil[dir] && compileUtil[dir](node, me.$vm, exp);
				                }
				            }
				        });
				    }
				};

				// 指令处理集合
				var compileUtil = {
				    text: function(node, vm, exp) {
				        this.bind(node, vm, exp, 'text');
				    },
				    // ...省略
				    bind: function(node, vm, exp, dir) {
				        var updaterFn = updater[dir + 'Updater'];
				        // 第一次初始化视图
				        updaterFn && updaterFn(node, vm[exp]);
				        // 实例化订阅者，此操作会在对应的属性消息订阅器中添加了该订阅者watcher
				        new Watcher(vm, exp, function(value, oldValue) {
				            // 一旦属性值有变化，会收到通知执行此更新函数，更新视图
				            updaterFn && updaterFn(node, value, oldValue);
				        });
				    }
				};

				// 更新函数
				var updater = {
				    textUpdater: function(node, value) {
				        node.textContent = typeof value == 'undefined' ? '' : value;
				    }
				    // ...省略
				};
			2.2 :这里通过递归遍历保证了每个节点及子节点都会解析编译到，包括了{{}}表达式声明的文本节点。指令的声明规定是通过特定前缀的节点属性来标记，如<span v-text="content" other-attr中v-text便是指令，而other-attr不是指令，只是普通的属性。
			监听数据、绑定更新函数的处理是在compileUtil.bind()这个方法中，通过new Watcher()添加回调来接收数据变化的通知

			至此，一个简单的Compile就完成了，完整代码：
			function Compile(el, vm) {
			    this.$vm = vm;
			    this.$el = this.isElementNode(el) ? el : document.querySelector(el);

			    if (this.$el) {
			        this.$fragment = this.node2Fragment(this.$el);
			        this.init();
			        this.$el.appendChild(this.$fragment);
			    }
			}

			Compile.prototype = {
			    node2Fragment: function(el) {
			        var fragment = document.createDocumentFragment(),
			            child;

			        // 将原生节点拷贝到fragment
			        while (child = el.firstChild) {
			            fragment.appendChild(child);
			        }

			        return fragment;
			    },

			    init: function() {
			        this.compileElement(this.$fragment);
			    },

			    compileElement: function(el) {
			        var childNodes = el.childNodes,
			            me = this;

			        [].slice.call(childNodes).forEach(function(node) {
			            var text = node.textContent;
			            var reg = /\{\{(.*)\}\}/;

			            if (me.isElementNode(node)) {
			                me.compile(node);

			            } else if (me.isTextNode(node) && reg.test(text)) {
			                me.compileText(node, RegExp.$1);
			            }

			            if (node.childNodes && node.childNodes.length) {
			                me.compileElement(node);
			            }
			        });
			    },

			    compile: function(node) {
			        var nodeAttrs = node.attributes,
			            me = this;

			        [].slice.call(nodeAttrs).forEach(function(attr) {
			            var attrName = attr.name;
			            if (me.isDirective(attrName)) {
			                var exp = attr.value;
			                var dir = attrName.substring(2);
			                // 事件指令
			                if (me.isEventDirective(dir)) {
			                    compileUtil.eventHandler(node, me.$vm, exp, dir);
			                    // 普通指令
			                } else {
			                    compileUtil[dir] && compileUtil[dir](node, me.$vm, exp);
			                }

			                node.removeAttribute(attrName);
			            }
			        });
			    },

			    compileText: function(node, exp) {
			        compileUtil.text(node, this.$vm, exp);
			    },

			    isDirective: function(attr) {
			        return attr.indexOf('v-') == 0;
			    },

			    isEventDirective: function(dir) {
			        return dir.indexOf('on') === 0;
			    },

			    isElementNode: function(node) {
			        return node.nodeType == 1;
			    },

			    isTextNode: function(node) {
			        return node.nodeType == 3;
			    }
			};

			// 指令处理集合
			var compileUtil = {
			    text: function(node, vm, exp) {
			        this.bind(node, vm, exp, 'text');
			    },

			    html: function(node, vm, exp) {
			        this.bind(node, vm, exp, 'html');
			    },

			    model: function(node, vm, exp) {
			        this.bind(node, vm, exp, 'model');

			        var me = this,
			            val = this._getVMVal(vm, exp);
			        node.addEventListener('input', function(e) {
			            var newValue = e.target.value;
			            if (val === newValue) {
			                return;
			            }

			            me._setVMVal(vm, exp, newValue);
			            val = newValue;
			        });
			    },

			    class: function(node, vm, exp) {
			        this.bind(node, vm, exp, 'class');
			    },

			    bind: function(node, vm, exp, dir) {
			        var updaterFn = updater[dir + 'Updater'];

			        updaterFn && updaterFn(node, this._getVMVal(vm, exp));

			        new Watcher(vm, exp, function(value, oldValue) {
			            updaterFn && updaterFn(node, value, oldValue);
			        });
			    },

			    // 事件处理
			    eventHandler: function(node, vm, exp, dir) {
			        var eventType = dir.split(':')[1],
			            fn = vm.$options.methods && vm.$options.methods[exp];

			        if (eventType && fn) {
			            node.addEventListener(eventType, fn.bind(vm), false);
			        }
			    },

			    _getVMVal: function(vm, exp) {
			        var val = vm;
			        exp = exp.split('.');
			        exp.forEach(function(k) {
			            val = val[k];
			        });
			        return val;
			    },

			    _setVMVal: function(vm, exp, value) {
			        var val = vm;
			        exp = exp.split('.');
			        exp.forEach(function(k, i) {
			            // 非最后一个key，更新val的值
			            if (i < exp.length - 1) {
			                val = val[k];
			            } else {
			                val[k] = value;
			            }
			        });
			    }
			};


			var updater = {
			    textUpdater: function(node, value) {
			        node.textContent = typeof value == 'undefined' ? '' : value;
			    },

			    htmlUpdater: function(node, value) {
			        node.innerHTML = typeof value == 'undefined' ? '' : value;
			    },

			    classUpdater: function(node, value, oldValue) {
			        var className = node.className;
			        className = className.replace(oldValue, '').replace(/\s$/, '');

			        var space = className && String(value) ? ' ' : '';

			        node.className = className + space + value;
			    },

			    modelUpdater: function(node, value, oldValue) {
			        node.value = typeof value == 'undefined' ? '' : value;
			    }
			};

		3.实现Wathcer
			Watcher订阅者作为Observer和Compile之间通信的桥梁，主要做的事情是:
			1、在自身实例化时往属性订阅器(dep)里面添加自己
			2、自身必须有一个update()方法
			3、待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。
			代码如下：
				function Watcher(vm, exp, cb) {
				    this.cb = cb;
				    this.vm = vm;
				    this.exp = exp;
				    // 此处为了触发属性的getter，从而在dep添加自己，结合Observer更易理解
				    this.value = this.get(); 
				}
				Watcher.prototype = {
				    update: function() {
				        this.run();    // 属性值变化收到通知
				    },
				    run: function() {
				        var value = this.get(); // 取到最新值
				        var oldVal = this.value;
				        if (value !== oldVal) {
				            this.value = value;
				            this.cb.call(this.vm, value, oldVal); // 执行Compile中绑定的回调，更新视图
				        }
				    },
				    get: function() {
				        Dep.target = this;    // 将当前订阅者指向自己
				        var value = this.vm[exp];    // 触发getter，添加自己到属性订阅器中
				        Dep.target = null;    // 添加完毕，重置
				        return value;
				    }
				};
				// 这里再次列出Observer和Dep，方便理解
				Object.defineProperty(data, key, {
				    get: function() {
				        // 由于需要在闭包内添加watcher，所以可以在Dep定义一个全局target属性，暂存watcher, 添加完移除
				        Dep.target && dep.addDep(Dep.target);
				        return val;
				    }
				    // ... 省略
				});
				Dep.prototype = {
				    notify: function() {
				        this.subs.forEach(function(sub) {
				            sub.update(); // 调用订阅者的update方法，通知变化
				        });
				    }
				};
				实例化Watcher的时候，调用get()方法，通过Dep.target = watcherInstance标记订阅者是当前watcher实例，强行触发属性定义的getter方法，getter方法执行的时候，就会在属性的订阅器dep添加当前watcher实例，从而在属性值有变化的时候，watcherInstance就能收到更新通知。

				ok, Watcher也已经实现了，完整代码:
					function Watcher(vm, expOrFn, cb) {
					    this.cb = cb;
					    this.vm = vm;
					    this.expOrFn = expOrFn;
					    this.depIds = {};

					    if (typeof expOrFn === 'function') {
					        this.getter = expOrFn;
					    } else {
					        this.getter = this.parseGetter(expOrFn);
					    }




					    this.value = this.get();
					}

					Watcher.prototype = {
					    update: function() {
					        this.run();
					    },
					    run: function() {
					        var value = this.get();
					        var oldVal = this.value;
					        if (value !== oldVal) {
					            this.value = value;
					            this.cb.call(this.vm, value, oldVal);
					        }
					    },
					    addDep: function(dep) {
					        // 1. 每次调用run()的时候会触发相应属性的getter
					        // getter里面会触发dep.depend()，继而触发这里的addDep
					        // 2. 假如相应属性的dep.id已经在当前watcher的depIds里，说明不是一个新的属性，仅仅是改变了其值而已
					        // 则不需要将当前watcher添加到该属性的dep里
					        // 3. 假如相应属性是新的属性，则将当前watcher添加到新属性的dep里
					        // 如通过 vm.child = {name: 'a'} 改变了 child.name 的值，child.name 就是个新属性
					        // 则需要将当前watcher(child.name)加入到新的 child.name 的dep里
					        // 因为此时 child.name 是个新值，之前的 setter、dep 都已经失效，如果不把 watcher 加入到新的 child.name 的dep中
					        // 通过 child.name = xxx 赋值的时候，对应的 watcher 就收不到通知，等于失效了
					        // 4. 每个子属性的watcher在添加到子属性的dep的同时，也会添加到父属性的dep
					        // 监听子属性的同时监听父属性的变更，这样，父属性改变时，子属性的watcher也能收到通知进行update
					        // 这一步是在 this.get() --> this.getVMVal() 里面完成，forEach时会从父级开始取值，间接调用了它的getter
					        // 触发了addDep(), 在整个forEach过程，当前wacher都会加入到每个父级过程属性的dep
					        // 例如：当前watcher的是'child.child.name', 那么child, child.child, child.child.name这三个属性的dep都会加入当前watcher
					        if (!this.depIds.hasOwnProperty(dep.id)) {
					            dep.addSub(this);
					            this.depIds[dep.id] = dep;
					        }
					    },
					    get: function() {
					        Dep.target = this;
					        var value = this.getter.call(this.vm, this.vm);
					        Dep.target = null;
					        return value;
					    },

					    parseGetter: function(exp) {
					        if (/[^\w.$]/.test(exp)) return; 

					        var exps = exp.split('.');

					        return function(obj) {
					            for (var i = 0, len = exps.length; i < len; i++) {
					                if (!obj) return;
					                obj = obj[exps[i]];
					            }
					            return obj;
					        }
					    }
					};

		4.实现MVVM
			MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -> 视图更新；视图交互变化(input) -> 数据model变更的双向绑定效果。

			一个简单的MVVM构造器是这样子：
				function MVVM(options) {
				    this.$options = options;
				    var data = this._data = this.$options.data;
				    observe(data, this);
				    this.$compile = new Compile(options.el || document.body, this)
				}
			但是这里有个问题，从代码中可看出监听的数据对象是options.data，每次需要更新视图，则必须通过var vm = new MVVM({data:{name: 'kindeng'}}); vm._data.name = 'dmq'; 这样的方式来改变数据。

			显然不符合我们一开始的期望，我们所期望的调用方式应该是这样的：
			var vm = new MVVM({data: {name: 'kindeng'}}); vm.name = 'dmq';

			所以这里需要给MVVM实例添加一个属性代理的方法，使访问vm的属性代理为访问vm._data的属性，改造后的代码如下：
				function MVVM(options) {
				    this.$options = options;
				    var data = this._data = this.$options.data, me = this;
				    // 属性代理，实现 vm.xxx -> vm._data.xxx
				    Object.keys(data).forEach(function(key) {
				        me._proxy(key);
				    });
				    observe(data, this);
				    this.$compile = new Compile(options.el || document.body, this)
				}

				MVVM.prototype = {
				    _proxy: function(key) {
				        var me = this;
				        Object.defineProperty(me, key, {
				            configurable: false,
				            enumerable: true,
				            get: function proxyGetter() {
				                return me._data[key];
				            },
				            set: function proxySetter(newVal) {
				                me._data[key] = newVal;
				            }
				        });
				    }
				};
			这里主要还是利用了Object.defineProperty()这个方法来劫持了vm实例对象的属性的读写权，使读写vm实例的属性转成读写了vm._data的属性值，达到鱼目混珠的效果，

